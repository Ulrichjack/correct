# üìã GUIDE COMPLET - CORRECTION AUTOMATIQUE (2 SEMAINES)
## Version Sans Code - √âtapes D√©taill√©es

---

## üéØ OBJECTIF FINAL
Cr√©er une application qui :
1. Re√ßoit des copies d'√©tudiants (PDF/images)
2. Re√ßoit la correction du professeur
3. Compare automatiquement avec l'IA
4. G√©n√®re des rapports PDF avec notes et commentaires

---

# üîß JOUR 1 : INSTALLATION ET CONFIGURATION (2-3 heures)

## ‚úÖ √âtape 1.1 : V√©rifier Python
**Ce que tu fais :**
- Ouvre le terminal (CMD sur Windows, Terminal sur Mac/Linux)
- Tape : `python --version`
- Tu dois voir : Python 3.10 ou plus r√©cent
- Si √ßa ne marche pas, t√©l√©charge Python depuis python.org

**Comment savoir que √ßa marche :**
- Tu vois "Python 3.10.X" ou sup√©rieur affich√©

---

## ‚úÖ √âtape 1.2 : Cr√©er le dossier projet
**Ce que tu fais :**
- Cr√©e un nouveau dossier appel√© "exam-correction" sur ton ordinateur
- Ouvre ce dossier dans PyCharm (Fichier > Ouvrir > S√©lectionne le dossier)

**Comment savoir que √ßa marche :**
- PyCharm affiche ton dossier vide dans l'explorateur de fichiers √† gauche

---

## ‚úÖ √âtape 1.3 : Cr√©er environnement virtuel
**Ce que tu fais :**
- Dans PyCharm, ouvre le terminal int√©gr√© (en bas de l'√©cran)
- Tape : `python -m venv venv`
- Attends 1-2 minutes (√ßa cr√©e un dossier "venv")

**Pourquoi c'est important :**
- √áa isole ton projet des autres projets Python
- √âvite les conflits de versions

**Comment savoir que √ßa marche :**
- Un dossier "venv" appara√Æt dans ton projet

---

## ‚úÖ √âtape 1.4 : Activer l'environnement virtuel
**Ce que tu fais :**

**Sur Windows :**
- Dans le terminal PyCharm, tape : `venv\Scripts\activate`

**Sur Mac/Linux :**
- Dans le terminal PyCharm, tape : `source venv/bin/activate`

**Comment savoir que √ßa marche :**
- Tu vois "(venv)" au d√©but de ta ligne de commande
- Exemple : `(venv) C:\ton\chemin>`

---

## ‚úÖ √âtape 1.5 : Cr√©er la structure des dossiers
**Ce que tu fais :**
Dans PyCharm, clique droit sur ton projet > New > Directory et cr√©e ces dossiers :

```
exam-correction/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îî‚îÄ‚îÄ api/
‚îú‚îÄ‚îÄ uploads/
‚îÇ   ‚îú‚îÄ‚îÄ copies/
‚îÇ   ‚îî‚îÄ‚îÄ corrections/
‚îî‚îÄ‚îÄ exports/
```

**Cr√©e un par un :**
1. Dossier "app"
2. Dans app, cr√©e "services" et "api"
3. Dossier "uploads" √† la racine
4. Dans uploads, cr√©e "copies" et "corrections"
5. Dossier "exports" √† la racine

**Comment savoir que √ßa marche :**
- Tu vois cette structure dans l'explorateur de fichiers de PyCharm

---

## ‚úÖ √âtape 1.6 : Cr√©er fichier requirements.txt
**Ce que tu fais :**
- Dans PyCharm, clique droit sur la racine du projet
- New > File
- Nomme-le : `requirements.txt`
- Copie-colle dedans (exactement) :

```
fastapi==0.104.1
uvicorn[standard]==0.24.0
python-multipart==0.0.6
pytesseract==0.3.10
Pillow==10.1.0
pdf2image==1.16.3
openai==1.3.5
python-dotenv==1.0.0
PyPDF2==3.0.1
reportlab==4.0.7
aiofiles==23.2.1
```

- Sauvegarde le fichier (Ctrl+S)

**Comment savoir que √ßa marche :**
- Le fichier requirements.txt est visible dans ton projet

---

## ‚úÖ √âtape 1.7 : Installer les packages Python
**Ce que tu fais :**
- Dans le terminal PyCharm (avec venv activ√©)
- Tape : `pip install -r requirements.txt`
- Attends 5-10 minutes (√ßa t√©l√©charge et installe tout)

**Ce qui se passe :**
- Plein de lignes d√©filent dans le terminal
- Tu verras "Successfully installed..." √† la fin

**Comment savoir que √ßa marche :**
- Aucun message d'erreur rouge
- La commande se termine sans erreur

---

## ‚úÖ √âtape 1.8 : Installer Tesseract OCR
**Ce que tu fais selon ton syst√®me :**

**Windows :**
1. Va sur : https://github.com/UB-Mannheim/tesseract/wiki
2. T√©l√©charge l'installeur Windows (tesseract-ocr-w64-setup-v5.X.X.exe)
3. Lance l'installeur
4. Installe dans : `C:\Program Files\Tesseract-OCR`
5. Coche "Add to PATH" pendant l'installation
6. Clique sur "Install"

**Mac :**
1. Ouvre Terminal
2. Tape : `brew install tesseract`
3. Attends la fin de l'installation

**Linux :**
1. Ouvre Terminal
2. Tape : `sudo apt-get install tesseract-ocr`

**Comment savoir que √ßa marche :**
- Tape dans le terminal : `tesseract --version`
- Tu dois voir la version de Tesseract affich√©e

---

## ‚úÖ √âtape 1.9 : Cr√©er fichier .env
**Ce que tu fais :**
- Dans PyCharm, cr√©e un nouveau fichier nomm√© `.env` √† la racine
- √âcris dedans :

```
OPENAI_API_KEY=sk-votre-cl√©-ici
UPLOAD_FOLDER=uploads
MAX_FILE_SIZE=10485760
TESSERACT_PATH=C:\Program Files\Tesseract-OCR\tesseract.exe
```

**IMPORTANT :**
- Remplace `sk-votre-cl√©-ici` par ta vraie cl√© OpenAI
- Si tu n'as pas de cl√© OpenAI, va sur platform.openai.com pour en cr√©er une
- Sur Mac/Linux, change TESSERACT_PATH en : `/usr/local/bin/tesseract`

**Comment savoir que √ßa marche :**
- Le fichier .env existe dans ton projet

---

## ‚úÖ √âtape 1.10 : Cr√©er .gitignore
**Ce que tu fais :**
- Cr√©e un fichier `.gitignore` √† la racine
- √âcris dedans :

```
venv/
.env
uploads/
exports/
__pycache__/
*.pyc
.DS_Store
.idea/
```

**Pourquoi :**
- Emp√™che de commit les fichiers sensibles sur Git

---

# üìÅ JOUR 2-3 : UPLOAD DE FICHIERS (4-6 heures)

## ‚úÖ √âtape 2.1 : Cr√©er le fichier de configuration
**Ce que tu fais :**
- Dans le dossier "app", cr√©e un fichier : `config.py`
- Ce fichier va contenir toutes tes configurations

**Ce que ce fichier doit faire :**
1. Charger les variables du fichier .env
2. D√©finir les extensions de fichiers autoris√©es (PDF, JPG, PNG)
3. D√©finir la taille maximale des fichiers
4. Stocker le chemin vers Tesseract

**Comment savoir que √ßa marche :**
- Le fichier config.py existe dans le dossier app

---

## ‚úÖ √âtape 2.2 : Cr√©er le service de gestion des fichiers
**Ce que tu fais :**
- Dans `app/services/`, cr√©e un fichier : `file_service.py`

**Ce que ce fichier doit faire :**
1. **Fonction validate_file** : V√©rifie qu'un fichier upload√© est valide
   - V√©rifie l'extension (pdf, jpg, png seulement)
   - V√©rifie la taille (pas plus de 10MB)
   - Retourne True si OK, sinon retourne une erreur

2. **Fonction save_file** : Sauvegarde un fichier upload√©
   - Prend le fichier en param√®tre
   - Prend un nom de sous-dossier (copies ou corrections)
   - Cr√©e le dossier s'il n'existe pas
   - Sauvegarde le fichier avec son nom original
   - Retourne le chemin complet du fichier sauvegard√©

3. **Fonction cleanup_folder** : Nettoie un dossier
   - Supprime tous les fichiers d'un dossier temporaire
   - Recr√©e le dossier vide

**Comment savoir que √ßa marche :**
- Le fichier file_service.py existe
- Tu peux l'importer sans erreur

---

## ‚úÖ √âtape 2.3 : Cr√©er le fichier principal de l'API
**Ce que tu fais :**
- Dans le dossier "app", cr√©e un fichier : `main.py`

**Ce que ce fichier doit faire :**
1. Cr√©er une application FastAPI
2. Activer CORS (pour permettre au frontend de communiquer)
3. Cr√©er un dictionnaire pour stocker les sessions en m√©moire
4. Cr√©er une route GET "/" qui retourne "API en marche"
5. Cr√©er une route GET "/health" pour v√©rifier que tout fonctionne

**Comment savoir que √ßa marche :**
- Le fichier main.py existe dans app/

---

## ‚úÖ √âtape 2.4 : Lancer le serveur pour la premi√®re fois
**Ce que tu fais :**
- Dans le terminal PyCharm
- Tape : `uvicorn app.main:app --reload --port 8000`

**Ce qui doit se passer :**
- Tu vois : "Uvicorn running on http://127.0.0.1:8000"
- Le serveur d√©marre sans erreur

**Comment savoir que √ßa marche :**
1. Ouvre ton navigateur
2. Va sur : http://localhost:8000
3. Tu dois voir un message JSON : {"message": "API en marche"}
4. Va sur : http://localhost:8000/docs
5. Tu vois l'interface Swagger (interface de test de l'API)

**Si √ßa ne marche pas :**
- V√©rifie qu'aucun autre programme n'utilise le port 8000
- V√©rifie que tu as bien activ√© l'environnement virtuel (venv)

---

## ‚úÖ √âtape 2.5 : Ajouter la route d'upload des copies
**Ce que tu fais :**
- Dans `main.py`, ajoute une nouvelle route POST `/upload-copies`

**Ce que cette route doit faire :**
1. Accepter plusieurs fichiers en m√™me temps
2. Pour chaque fichier :
   - Appeler validate_file pour v√©rifier qu'il est valide
   - Appeler save_file pour le sauvegarder dans uploads/copies/
   - Stocker le nom et le chemin du fichier
3. G√©n√©rer un ID unique pour cette session (utilise uuid)
4. Stocker dans le dictionnaire en m√©moire :
   - L'ID de session
   - La liste des fichiers upload√©s
   - Le statut "uploaded"
5. Retourner en JSON :
   - L'ID de session
   - Le nombre de fichiers upload√©s
   - La liste des fichiers

**Comment savoir que √ßa marche :**
1. Va sur http://localhost:8000/docs
2. Trouve la route POST /upload-copies
3. Clique sur "Try it out"
4. Upload 1 ou 2 fichiers PDF de test
5. Clique sur "Execute"
6. Tu dois voir une r√©ponse avec :
   - Un session_id (exemple : "a1b2c3d4-...")
   - Le nombre de fichiers
   - La liste des fichiers upload√©s
7. V√©rifie que les fichiers sont bien dans le dossier uploads/copies/

---

## ‚úÖ √âtape 2.6 : Ajouter la route d'upload de la correction
**Ce que tu fais :**
- Dans `main.py`, ajoute une route POST `/upload-correction/{session_id}`

**Ce que cette route doit faire :**
1. Prendre en param√®tre l'ID de session
2. V√©rifier que cette session existe (sinon erreur 404)
3. Accepter UN seul fichier (la correction du prof)
4. Valider et sauvegarder le fichier dans uploads/corrections/
5. Ajouter ce fichier dans la session en m√©moire
6. Retourner la confirmation

**Comment savoir que √ßa marche :**
1. Va sur http://localhost:8000/docs
2. D'abord upload des copies (√©tape 2.5) pour avoir un session_id
3. Copie le session_id obtenu
4. Trouve la route POST /upload-correction/{session_id}
5. Colle le session_id dans le champ
6. Upload un fichier PDF de correction
7. Tu dois voir une confirmation
8. V√©rifie que le fichier est dans uploads/corrections/

---

## ‚úÖ √âtape 2.7 : Tester le workflow complet d'upload
**Ce que tu fais :**
1. Pr√©pare 2-3 fichiers PDF de test
2. Lance le serveur si ce n'est pas fait
3. Va sur http://localhost:8000/docs
4. Upload les copies ‚Üí note le session_id
5. Upload la correction avec le session_id
6. V√©rifie que tous les fichiers sont bien dans uploads/

**Comment savoir que √ßa marche :**
- Tu peux uploader plusieurs copies
- Tu peux uploader une correction
- Tous les fichiers sont sauvegard√©s dans les bons dossiers
- Aucune erreur n'appara√Æt

---

# üîç JOUR 4-5 : EXTRACTION DE TEXTE (OCR) (6-8 heures)

## ‚úÖ √âtape 3.1 : Cr√©er le service OCR
**Ce que tu fais :**
- Dans `app/services/`, cr√©e un fichier : `ocr_service.py`

**Ce que ce fichier doit faire :**

**Fonction 1 : extract_from_image**
- Prend en param√®tre un chemin d'image (JPG/PNG)
- Utilise pytesseract pour extraire le texte
- Configure la langue en fran√ßais
- Retourne le texte extrait
- Si erreur, retourne une cha√Æne vide

**Fonction 2 : extract_from_pdf**
- Prend en param√®tre un chemin de PDF
- Convertit chaque page du PDF en image (avec pdf2image)
- Pour chaque page :
  - Extrait le texte avec pytesseract
  - Ajoute un marqueur "--- PAGE X ---"
- Combine tout le texte
- Retourne le texte complet
- Affiche la progression (Page 1/5, Page 2/5, etc.)

**Fonction 3 : extract_text (fonction principale)**
- Prend un chemin de fichier
- D√©tecte l'extension (.pdf, .jpg, .png)
- Appelle la bonne fonction (extract_from_pdf ou extract_from_image)
- Retourne le texte extrait

**Comment savoir que √ßa marche :**
- Le fichier ocr_service.py existe
- Tu peux l'importer sans erreur

---

## ‚úÖ √âtape 3.2 : Tester l'OCR manuellement
**Ce que tu fais :**
- Cr√©e un petit script de test dans la racine : `test_ocr.py`

**Ce que le script doit faire :**
1. Importer ocr_service
2. Tester sur un fichier PDF :
   - D√©finir le chemin d'un PDF de test
   - Appeler extract_text
   - Afficher les 500 premiers caract√®res
   - Afficher la longueur totale du texte

**Comment tester :**
- Place un PDF de test dans uploads/copies/
- Lance : `python test_ocr.py`
- Tu dois voir le texte extrait s'afficher

**Comment savoir que √ßa marche :**
- Tu vois du texte fran√ßais extrait
- Le texte correspond au contenu du PDF
- Aucune erreur

**Si √ßa ne marche pas :**
- V√©rifie que Tesseract est bien install√© : `tesseract --version`
- V√©rifie le chemin dans .env (TESSERACT_PATH)
- Teste avec un PDF de bonne qualit√© (pas scann√© √† basse r√©solution)

---

## ‚úÖ √âtape 3.3 : Ajouter route de test OCR dans l'API
**Ce que tu fais :**
- Dans `main.py`, ajoute une route POST `/test-ocr/{session_id}`

**Ce que cette route doit faire :**
1. Prendre en param√®tre le session_id
2. V√©rifier que la session existe
3. R√©cup√©rer la premi√®re copie de la session
4. Appeler ocr_service.extract_text sur cette copie
5. Si une correction existe, extraire aussi son texte
6. Retourner :
   - Le nom du fichier
   - Les 500 premiers caract√®res du texte
   - La longueur totale du texte

**Comment savoir que √ßa marche :**
1. Upload des fichiers via /upload-copies et /upload-correction
2. Note le session_id
3. Va sur /docs
4. Appelle /test-ocr/{session_id}
5. Tu vois le texte extrait en r√©ponse
6. V√©rifie que le texte est coh√©rent

**Probl√®mes courants :**
- Si le texte est vide : le PDF est peut-√™tre une image scann√©e de mauvaise qualit√©
- Si le texte est bizarre : Tesseract a du mal avec l'√©criture manuscrite
- Si erreur : v√©rifie les chemins des fichiers

---

## ‚úÖ √âtape 3.4 : Am√©liorer la qualit√© OCR (optionnel)
**Ce que tu peux faire pour am√©liorer :**
1. Augmenter le DPI lors de la conversion PDF ‚Üí Image (passe de 200 √† 300)
2. Pr√©-traiter les images avant OCR :
   - Convertir en niveaux de gris
   - Augmenter le contraste
   - Enlever le bruit

**Comment :**
- Modifie la fonction extract_from_pdf
- Avant d'appeler pytesseract, traite l'image avec Pillow

**Mais attention :**
- √áa prend plus de temps
- Pas forc√©ment n√©cessaire pour des documents de bonne qualit√©

---

# ü§ñ JOUR 6-8 : INT√âGRATION IA (8-10 heures)

## ‚úÖ √âtape 4.1 : Obtenir une cl√© API OpenAI
**Ce que tu fais :**
1. Va sur : https://platform.openai.com
2. Cr√©e un compte ou connecte-toi
3. Va dans "API Keys"
4. Clique sur "Create new secret key"
5. Copie la cl√© (elle commence par "sk-...")
6. Colle-la dans ton fichier .env √† la place de "sk-votre-cl√©-ici"

**IMPORTANT :**
- Ne partage JAMAIS cette cl√©
- Ajoute des cr√©dits sur ton compte OpenAI (5-10‚Ç¨ suffisent pour tester)

**Comment savoir que √ßa marche :**
- Tu as une cl√© qui commence par "sk-"
- Elle est dans ton fichier .env

---

## ‚úÖ √âtape 4.2 : Cr√©er le service IA
**Ce que tu fais :**
- Dans `app/services/`, cr√©e un fichier : `ai_service.py`

**Ce que ce fichier doit faire :**

**Fonction principale : corriger_question**

**Param√®tres :**
- reponse_etudiant (texte de la r√©ponse)
- correction_prof (texte de la correction attendue)
- points_max (nombre de points pour cette question)
- numero_question (Q1, Q2, etc.)

**Ce que la fonction fait :**
1. **Construire un prompt pour l'IA** qui contient :
   - Le r√¥le : "Tu es assistant de correction pour enseignant"
   - La correction du prof (r√©ponse attendue)
   - La r√©ponse de l'√©tudiant
   - Le nombre de points maximum
   - Les instructions :
     - Compare le sens, pas les mots exacts
     - Attribue des points selon la qualit√©
     - Cat√©gorise : REUSSIE (‚â•90%), PARTIELLE (30-89%), RATEE (<30%)
     - G√©n√®re 3 types de feedback
   - Le format de r√©ponse attendu en JSON

2. **Appeler l'API OpenAI** :
   - Utilise le mod√®le GPT-4
   - Envoie le prompt
   - Configure temperature=0.3 (pour des r√©ponses coh√©rentes)
   - Demande une r√©ponse en format JSON

3. **Parser la r√©ponse** :
   - R√©cup√®re le JSON retourn√©
   - Extrait :
     - points_obtenus
     - categorie (REUSSIE/PARTIELLE/RATEE)
     - annotation_courte (‚â§15 mots)
     - feedback_detaille (explication)
     - conseil (astuce de r√©vision)

4. **G√©rer les erreurs** :
   - Si l'API √©choue, retourne une correction par d√©faut avec 0 points
   - Log l'erreur pour d√©bugger

**Comment savoir que √ßa marche :**
- Le fichier ai_service.py existe
- Tu peux l'importer sans erreur

---

## ‚úÖ √âtape 4.3 : Tester l'IA manuellement
**Ce que tu fais :**
- Cr√©e un fichier de test : `test_ai.py`

**Ce que le script doit faire :**
1. Importer ai_service
2. D√©finir une r√©ponse test d'√©tudiant (exemple : "La photosynth√®se produit de l'oxyg√®ne")
3. D√©finir la correction prof (exemple : "La photosynth√®se transforme CO2 + H2O + lumi√®re en glucose + O2")
4. Appeler corriger_question avec 5 points max
5. Afficher le r√©sultat JSON

**Comment tester :**
- Lance : `python test_ai.py`
- Attends quelques secondes (appel API)
- Tu dois voir un JSON avec :
  - Points obtenus
  - Cat√©gorie
  - Annotation courte
  - Feedback d√©taill√©
  - Conseil

**Comment savoir que √ßa marche :**
- L'IA retourne une r√©ponse coh√©rente
- Les points sont logiques (pas 5/5 si la r√©ponse est incompl√®te)
- L'annotation est en fran√ßais
- Le conseil est pertinent

**Si √ßa ne marche pas :**
- V√©rifie ta cl√© API dans .env
- V√©rifie que tu as des cr√©dits sur ton compte OpenAI
- Regarde les messages d'erreur dans le terminal

---

## ‚úÖ √âtape 4.4 : Cr√©er le mod√®le de bar√®me
**Ce que tu fais :**
- Dans `main.py`, ajoute une classe Pydantic pour le bar√®me

**Ce que cette classe doit contenir :**
- note_totale : la note maximale (exemple : 20)
- questions : un dictionnaire {"Q1": 5.0, "Q2": 3.0, "Q3": 4.0, etc.}

**Cr√©er aussi une classe pour la requ√™te de correction :**
- session_id : l'ID de la session
- bareme : le bar√®me d√©fini ci-dessus

**Comment savoir que √ßa marche :**
- Les classes sont d√©finies dans main.py
- Elles utilisent Pydantic (validation automatique)

---

## ‚úÖ √âtape 4.5 : Cr√©er le service de correction complet
**Ce que tu fais :**
- Dans `app/services/`, cr√©e un fichier : `correction_service.py`

**Ce que ce fichier doit faire :**

**Fonction 1 : extraire_questions**
- Prend un texte complet (extrait par OCR)
- Prend le nombre de questions
- D√©coupe le texte par num√©ro de question (Q1, Q2, etc.)
- Utilise des expressions r√©guli√®res (regex) pour trouver "Q1:", "Question 1:", etc.
- Retourne un dictionnaire : {"Q1": "texte r√©ponse 1", "Q2": "texte r√©ponse 2", etc.}

**M√©thode simple :**
- Cherche le pattern "Q1" ou "Question 1"
- Prend tout le texte jusqu'au prochain "Q2"
- R√©p√®te pour toutes les questions

**Fonction 2 : corriger_copie** (la plus importante !)
- Prend en param√®tres :
  - copie_path (chemin du fichier copie √©tudiant)
  - correction_path (chemin du fichier correction prof)
  - bareme (dictionnaire des points)

**Ce qu'elle fait √©tape par √©tape :**

1. **Extraire les textes** :
   - Appelle ocr_service.extract_text sur la copie
   - Appelle ocr_service.extract_text sur la correction
   - Affiche "Extraction en cours..." pour suivre

2. **D√©couper en questions** :
   - Appelle extraire_questions sur le texte de la copie
   - Appelle extraire_questions sur le texte de la correction
   - Tu as maintenant deux dictionnaires : un pour l'√©tudiant, un pour le prof

3. **Corriger chaque question** :
   - Pour chaque question du bar√®me (Q1, Q2, etc.) :
     - R√©cup√®re la r√©ponse de l'√©tudiant
     - R√©cup√®re la correction du prof
     - R√©cup√®re le nombre de points max
     - Appelle ai_service.corriger_question
     - Affiche "Correction Q1..." pour suivre
     - Stocke le r√©sultat

4. **Calculer la note finale** :
   - Somme tous les points_obtenus
   - Calcule la note max (somme du bar√®me)

5. **Retourner les r√©sultats** :
   - Retourne un dictionnaire avec :
     - resultats : liste de tous les r√©sultats par question
     - note_finale : total des points obtenus
     - note_max : total des points possible

**Comment savoir que √ßa marche :**
- Le fichier correction_service.py existe
- Tu peux l'importer sans erreur

---

## ‚úÖ √âtape 4.6 : Ajouter la route de lancement de correction
**Ce que tu fais :**
- Dans `main.py`, ajoute une route POST `/lancer-correction`

**Ce que cette route doit faire :**
1. Recevoir en param√®tre :
   - session_id
   - bareme (avec note totale et points par question)

2. V√©rifier que la session existe
3. V√©rifier qu'il y a des copies et une correction upload√©es
4. Pour chaque copie dans la session :
   - Afficher "Correction de copie_X.pdf..."
   - Appeler correction_service.corriger_copie
   - Stocker le r√©sultat avec le nom du fichier

5. Sauvegarder tous les r√©sultats dans la session
6. Changer le statut de la session en "completed"
7. Retourner :
   - Message de succ√®s
   - Nombre de copies corrig√©es
   - Tous les r√©sultats

**Comment savoir que √ßa marche :**
1. Upload des copies et une correction
2. Va sur /docs
3. Appelle /lancer-correction avec :
   - Le session_id
   - Un bar√®me (exemple : {"note_totale": 20, "questions": {"Q1": 5, "Q2": 5, "Q3": 10}})
4. Attends (√ßa peut prendre 1-2 minutes par copie)
5. Tu dois voir les r√©sultats avec :
   - Les notes par question
   - La note finale
   - Les annotations et feedbacks

**Probl√®mes courants :**
- Si timeout : l'IA prend trop de temps ‚Üí augmente le timeout
- Si erreur "Pas de r√©ponse" : le d√©coupage des questions a √©chou√©
- Si points bizarres : le prompt IA n'est pas assez clair

---

## ‚úÖ √âtape 4.7 : Tester avec une copie compl√®te
**Ce que tu fais :**
1. Pr√©pare un PDF de test avec :
   - 2-3 questions clairement num√©rot√©es (Q1, Q2, Q3)
   - Des r√©ponses de diff√©rentes qualit√©s (une bonne, une moyenne, une mauvaise)

2. Pr√©pare la correction du prof avec :
   - Les m√™mes num√©ros de questions
   - Les r√©ponses attendues

3. Upload les fichiers
4. Lance la correction avec un bar√®me coh√©rent
5. V√©rifie que :
   - Toutes les questions sont d√©tect√©es
   - Les notes sont coh√©rentes
   - Les feedbacks sont pertinents

**Comment savoir que √ßa marche :**
- Tu obtiens des r√©sultats pour toutes les questions
- Les notes sont logiques
- Les commentaires sont en fran√ßais et pertinents
- Aucune erreur

---

# üìÑ JOUR 9-10 : G√âN√âRATION DE RAPPORTS PDF (6-8 heures)

## ‚úÖ √âtape 5.1 : Cr√©er le service de rapports
**Ce que tu fais :**
- Dans `app/services/`, cr√©e un fichier : `report_service.py`

**Ce que ce fichier doit faire :**

**Fonction principale : generer_rapport_pdf**

**Param√®tres :**
- resultat : le dictionnaire de r√©sultats d'une copie
- output_path : o√π sauvegarder le PDF

**Ce que la fonction fait :**

1. **Cr√©er le document PDF** :
   - Utilise ReportLab
   - Format A4
   - Cr√©e un document vide

2. **Ajouter le titre** :
   - "üìù RAPPORT DE CORRECTION"
   - Nom du fichier de la copie
   - Date