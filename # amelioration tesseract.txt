# 🎯 Guide Complet : Créer un Modèle Tesseract Personnalisé pour Votre Application

Ce guide vous permettra de créer un modèle `.traineddata` spécialisé dans la reconnaissance de l'écriture manuscrite pour améliorer drastiquement la précision de votre système de correction automatique.

---

## 📋 SOMMAIRE

1. [Préparation de l'environnement](#phase-1-préparation-de-lenvironnement)
2. [Création de la base de données d'entraînement](#phase-2-création-de-la-base-dentraînement)
3. [Lancement du fine-tuning](#phase-3-lancement-du-fine-tuning)
4. [Intégration dans votre application](#phase-4-intégration-dans-lapplication)
5. [Optimisations avancées](#phase-5-optimisations-avancées)
6. [Dépannage](#dépannage)

---

## 🔧 PHASE 1 : PRÉPARATION DE L'ENVIRONNEMENT

**⏱️ Temps estimé : 1-2 heures**

### ✅ Étape 1.1 : Installer les dépendances système

#### 🪟 Sur Windows (Recommandé : WSL)

```powershell
# Dans PowerShell en tant qu'administrateur
wsl --install

# Redémarrer l'ordinateur, puis ouvrir WSL Ubuntu et taper :
sudo apt-get update
sudo apt-get install -y tesseract-ocr automake autoconf libtool pkg-config \
  libpng-dev libjpeg-dev libtiff-dev zlib1g-dev git make bc
```

#### 🍎 Sur Mac

```bash
brew install tesseract automake autoconf libtool pkg-config libpng jpeg libtiff bc
```

#### 🐧 Sur Linux (Debian/Ubuntu)

```bash
sudo apt-get update
sudo apt-get install -y tesseract-ocr automake autoconf libtool pkg-config \
  libpng-dev libjpeg-dev libtiff-dev zlib1g-dev git make bc
```

**✔️ Vérification :**
```bash
tesseract --version
# Résultat attendu : tesseract 4.x.x ou 5.x.x
```

---

### ✅ Étape 1.2 : Cloner le dépôt `tesstrain`

```bash
# Naviguer vers votre dossier de travail
cd ~/Documents

# Cloner le dépôt officiel
git clone https://github.com/tesseract-ocr/tesstrain.git

# Entrer dans le dossier
cd tesstrain
```

**✔️ Vérification :**
```bash
ls -la
# Vous devriez voir : data/, Makefile, requirements.txt, etc.
```

---

### ✅ Étape 1.3 : Installer les dépendances Python

```bash
# Créer un environnement virtuel (recommandé)
python3 -m venv venv

# Activer l'environnement
source venv/bin/activate  # Sur Windows WSL/Linux
# venv\Scripts\activate   # Sur Windows CMD

# Installer les dépendances
pip install --upgrade pip
pip install -r requirements.txt
```

**✔️ Vérification :**
```bash
pip list | grep Pillow
# Vous devriez voir Pillow, lxml, et d'autres packages
```

---

### ✅ Étape 1.4 : Télécharger le modèle de base français

```bash
# Créer le dossier pour les modèles de base
mkdir -p tessdata_best

# Télécharger le modèle français (14 MB environ)
wget -O tessdata_best/fra.traineddata https://github.com/tesseract-ocr/tessdata_best/raw/main/fra.traineddata

# Alternative avec curl (si wget n'existe pas)
curl -L -o tessdata_best/fra.traineddata \
  https://github.com/tesseract-ocr/tessdata_best/raw/main/fra.traineddata
```

**✔️ Vérification :**
```bash
ls -lh tessdata_best/fra.traineddata
# Taille attendue : environ 14-15 MB
```

---

## 📄 PHASE 2 : CRÉATION DE LA BASE D'ENTRAÎNEMENT

**⚠️ ÉTAPE CRUCIALE - La qualité de vos données détermine la qualité du modèle**

### ✅ Étape 2.1 : Créer la structure de dossiers

```bash
# Dans le dossier tesstrain/
mkdir -p data/fra_manuscrit-ground-truth
```

**📂 Structure attendue :**
```
tesstrain/
├── data/
│   └── fra_manuscrit-ground-truth/
│       ├── copie1.png
│       ├── copie1.gt.txt
│       ├── copie2.png
│       ├── copie2.gt.txt
│       └── ...
├── tessdata_best/
│   └── fra.traineddata
├── Makefile
└── requirements.txt
```

---

### ✅ Étape 2.2 : Préparer le texte d'entraînement

Créez un fichier `texte_entrainement.txt` contenant environ 200-300 mots représentatifs des copies d'examens :

```text
Question 1 : Définissez les trois états de la matière.
Les trois états de la matière sont : l'état solide, l'état liquide et l'état gazeux.
Un solide possède une forme et un volume définis. Un liquide a un volume défini mais prend la forme de son contenant.
Un gaz n'a ni forme ni volume définis et remplit tout l'espace disponible.

Question 2 : Expliquez le cycle de l'eau.
Le cycle de l'eau comprend quatre étapes principales : l'évaporation, la condensation, les précipitations et le ruissellement.
L'eau s'évapore des océans et des lacs, forme des nuages par condensation, retombe sous forme de pluie ou de neige, puis retourne aux océans via les rivières.

Question 3 : Calculez la surface d'un rectangle de longueur 8 cm et largeur 5 cm.
Surface = Longueur × Largeur
Surface = 8 cm × 5 cm = 40 cm²
La surface du rectangle est de 40 centimètres carrés.
```

**💡 Conseil :** Adaptez ce texte aux types de questions de vos examens (mathématiques, sciences, histoire, etc.).

---

### ✅ Étape 2.3 : Collecter les échantillons manuscrits

#### 📝 Méthode recommandée :

1. **Imprimer le texte** d'entraînement sur plusieurs feuilles
2. **Faire recopier** par 10-20 personnes différentes (élèves, collègues, famille)
3. **Scanner ou photographier** chaque copie :
   - **Résolution minimum :** 300 DPI
   - **Format :** PNG ou TIFF (éviter JPEG pour l'entraînement)
   - **Éclairage :** Uniforme, sans ombres
   - **Qualité :** Texte net, pas de flou

4. **Nommer les fichiers** de manière cohérente :
   ```
   eleve_001.png
   eleve_002.png
   eleve_003.png
   ...
   ```

---

### ✅ Étape 2.4 : Créer les fichiers de vérité terrain (ground truth)

Pour chaque image, créez un fichier `.gt.txt` avec **EXACTEMENT** le même nom et le texte transcrit.

#### 🤖 Script Python pour automatiser :

```python
import os
import shutil

# Chemin vers vos images scannées
SOURCE_IMAGES = "/chemin/vers/vos/images/"
# Chemin vers le dossier tesstrain
DEST_FOLDER = "~/Documents/tesstrain/data/fra_manuscrit-ground-truth/"

# Le texte de référence (ce qui a été recopié)
TEXTE_REFERENCE = """Question 1 : Définissez les trois états de la matière.
Les trois états de la matière sont : l'état solide, l'état liquide et l'état gazeux.
Un solide possède une forme et un volume définis. Un liquide a un volume défini mais prend la forme de son contenant.
Un gaz n'a ni forme ni volume définis et remplit tout l'espace disponible.

Question 2 : Expliquez le cycle de l'eau.
Le cycle de l'eau comprend quatre étapes principales : l'évaporation, la condensation, les précipitations et le ruissellement.
L'eau s'évapore des océans et des lacs, forme des nuages par condensation, retombe sous forme de pluie ou de neige, puis retourne aux océans via les rivières.

Question 3 : Calculez la surface d'un rectangle de longueur 8 cm et largeur 5 cm.
Surface = Longueur × Largeur
Surface = 8 cm × 5 cm = 40 cm²
La surface du rectangle est de 40 centimètres carrés."""

# Créer les paires image + ground truth
for filename in os.listdir(SOURCE_IMAGES):
    if filename.endswith(('.png', '.tif', '.tiff')):
        # Copier l'image
        base_name = os.path.splitext(filename)[0]
        shutil.copy(
            os.path.join(SOURCE_IMAGES, filename),
            os.path.join(DEST_FOLDER, f"{base_name}.png")
        )
        
        # Créer le fichier .gt.txt
        with open(os.path.join(DEST_FOLDER, f"{base_name}.gt.txt"), 'w', encoding='utf-8') as f:
            f.write(TEXTE_REFERENCE)
        
        print(f"✅ Traité : {base_name}")

print(f"\n🎉 Terminé ! {len(os.listdir(DEST_FOLDER))//2} paires créées.")
```

**✔️ Vérification finale :**
```bash
cd data/fra_manuscrit-ground-truth/
ls -l | wc -l
# Doit afficher un nombre PAIR (chaque image a son .gt.txt)
```

---

## 🚀 PHASE 3 : LANCEMENT DU FINE-TUNING

**⏱️ Temps estimé : 30 minutes à 4 heures selon votre machine**

### ✅ Étape 3.1 : Lancer l'entraînement

```bash
# Retourner à la racine de tesstrain
cd ~/Documents/tesstrain

# Lancer l'entraînement (COMMANDE COMPLÈTE)
make training \
  MODEL_NAME=fra_manuscrit \
  START_MODEL=fra \
  TESSDATA=./tessdata_best \
  MAX_ITERATIONS=10000 \
  EPOCHS=1

# Pour un test rapide (1000 itérations, environ 15-30 min)
make training \
  MODEL_NAME=fra_manuscrit \
  START_MODEL=fra \
  TESSDATA=./tessdata_best \
  MAX_ITERATIONS=1000
```

**📊 Explication des paramètres :**

- `MODEL_NAME=fra_manuscrit` : Nom de votre modèle (doit correspondre au dossier)
- `START_MODEL=fra` : Modèle de base à améliorer
- `TESSDATA=./tessdata_best` : Localisation du modèle de base
- `MAX_ITERATIONS=10000` : Nombre de cycles d'apprentissage
  - **1000** : Test rapide (30 min)
  - **5000** : Bon compromis (1-2h)
  - **10000** : Production (2-4h)

**📈 Ce qui se passe pendant l'entraînement :**

```
At iteration 100/10000, Mean rms=1.234%, delta=0.456%, char train=2.345%, word train=12.345%
At iteration 200/10000, Mean rms=1.123%, delta=0.345%, char train=2.123%, word train=11.234%
...
```

- **char train** : Taux d'erreur sur les caractères (objectif : < 1%)
- **word train** : Taux d'erreur sur les mots (objectif : < 5%)

**⚠️ L'entraînement peut prendre du temps - NE PAS INTERROMPRE**

---

### ✅ Étape 3.2 : Vérifier la fin de l'entraînement

```bash
# À la fin, vous devriez voir :
# "Finished training at iteration XXXX"

# Vérifier que le modèle est créé
ls -lh data/fra_manuscrit.traineddata
# Taille attendue : 10-20 MB
```

**✔️ Fichier créé avec succès !** Passez à l'étape suivante.

---

## 🔗 PHASE 4 : INTÉGRATION DANS VOTRE APPLICATION

### ✅ Étape 4.1 : Copier le modèle dans Tesseract

#### Sur Windows :

```powershell
# Trouver le dossier tessdata de votre installation
# Généralement : C:\Program Files\Tesseract-OCR\tessdata

# Copier votre modèle
copy "C:\Users\VotreNom\Documents\tesstrain\data\fra_manuscrit.traineddata" ^
     "C:\Program Files\Tesseract-OCR\tessdata\"
```

#### Sur Mac/Linux :

```bash
# Trouver le dossier tessdata
tesseract --list-langs
# Affiche le chemin, ex: /usr/local/share/tessdata

# Copier le modèle
sudo cp ~/Documents/tesstrain/data/fra_manuscrit.traineddata \
        /usr/local/share/tessdata/
```

**✔️ Vérification :**
```bash
tesseract --list-langs
# Vous devriez voir "fra_manuscrit" dans la liste
```

---

### ✅ Étape 4.2 : Modifier `ocr_service.py`

Ouvrez votre fichier `app/services/ocr_service.py` et modifiez la ligne 32 :

```python
# AVANT (ligne 32)
texte = pytesseract.image_to_string(preprocessed_img, lang="fra")

# APRÈS (ligne 32)
texte = pytesseract.image_to_string(preprocessed_img, lang="fra_manuscrit")
```

**Modification complète de la fonction :**

```python
def extract_text_per_page(pdf_path: str) -> list:
    """
    Extrait le texte page par page d'un fichier PDF avec le modèle manuscrit.
    """
    print(f"📄 Lancement de l'extraction page par page pour {os.path.basename(pdf_path)}")
    try:
        images = convert_from_path(pdf_path, dpi=300)
        textes = []
        for i, img in enumerate(images):
            print(f"  - OCR sur la page {i + 1}/{len(images)}...")
            preprocessed_img = _preprocess_image_for_ocr(img)
            
            # ✨ UTILISATION DU MODÈLE MANUSCRIT
            texte = pytesseract.image_to_string(
                preprocessed_img, 
                lang="fra_manuscrit",  # ← CHANGEMENT ICI
                config='--psm 6'        # Mode détection de bloc de texte
            )
            textes.append(texte)

        print(f"✅ Extraction terminée. {len(textes)} pages traitées.")
        return textes
    except Exception as e:
        print(f"❌ Erreur lors de l'extraction : {str(e)}")
        return []
```

---

### ✅ Étape 4.3 : Ajouter une configuration dans `config.py`

```python
# Dans app/config.py, ajouter :

# ====================================
# CONFIGURATION OCR AVANCÉE
# ====================================

# Modèle Tesseract à utiliser
TESSERACT_MODEL = os.getenv("TESSERACT_MODEL", "fra_manuscrit")

# Configuration PSM (Page Segmentation Mode)
# 3 = Automatic page segmentation (défaut)
# 6 = Assume a single uniform block of text
# 11 = Sparse text. Find as much text as possible
TESSERACT_PSM = int(os.getenv("TESSERACT_PSM", 6))
```

**Puis dans `ocr_service.py` :**

```python
from app.config import TESSERACT_PATH, TESSERACT_MODEL, TESSERACT_PSM

# Modifier la ligne d'extraction
texte = pytesseract.image_to_string(
    preprocessed_img, 
    lang=TESSERACT_MODEL,
    config=f'--psm {TESSERACT_PSM}'
)
```

---

### ✅ Étape 4.4 : Tester le nouveau modèle

```bash
# Lancer votre application
cd C:/Users/jacke/PycharmProjects/fastApiProject
python -m uvicorn app.main:app --reload --port 8001

# Dans un autre terminal, tester avec une copie manuscrite
curl -X POST "http://localhost:8001/upload-copies-bundle" \
  -F "file=@/chemin/vers/copie_test.pdf"
```

**✔️ Observation attendue :**
- Les logs montrent `OCR sur la page 1/X...`
- Le texte extrait est **beaucoup plus précis** qu'avant
- Les noms d'élèves sont correctement reconnus

---

## 🎨 PHASE 5 : OPTIMISATIONS AVANCÉES

### 🔥 Optimisation 1 : Améliorer le prétraitement

Ajoutez ces options dans `_preprocess_image_for_ocr()` :

```python
def _preprocess_image_for_ocr(image: Image.Image) -> Image.Image:
    """
    Prétraitement avancé pour manuscrits.
    """
    open_cv_image = np.array(image)
    gray = cv2.cvtColor(open_cv_image, cv2.COLOR_BGR2GRAY)
    
    # 🆕 NOUVEAU : Réduction du bruit
    denoised = cv2.fastNlMeansDenoising(gray, None, 10, 7, 21)
    
    # 🆕 NOUVEAU : Augmentation du contraste (CLAHE)
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
    contrast = clahe.apply(denoised)
    
    # Binarisation
    _, thresh = cv2.threshold(contrast, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
    final_image = cv2.bitwise_not(thresh)
    
    return Image.fromarray(final_image)
```

---

### 🔥 Optimisation 2 : Utiliser plusieurs modèles en parallèle

```python
def extract_text_hybrid(image: Image.Image) -> str:
    """
    Utilise fra_manuscrit ET fra pour une meilleure précision.
    """
    preprocessed = _preprocess_image_for_ocr(image)
    
    # Modèle manuscrit (prioritaire)
    texte_manuscrit = pytesseract.image_to_string(
        preprocessed, 
        lang="fra_manuscrit",
        config='--psm 6'
    )
    
    # Modèle standard (backup)
    texte_standard = pytesseract.image_to_string(
        preprocessed, 
        lang="fra",
        config='--psm 6'
    )
    
    # Retourner le texte le plus long (généralement le meilleur)
    return texte_manuscrit if len(texte_manuscrit) > len(texte_standard) else texte_standard
```

---

### 🔥 Optimisation 3 : Réentraîner avec plus de données

Après avoir testé votre modèle :

1. **Identifiez les erreurs** récurrentes
2. **Collectez plus d'exemples** de ces cas difficiles
3. **Ajoutez-les** au dossier `fra_manuscrit-ground-truth/`
4. **Relancez l'entraînement** avec `MAX_ITERATIONS=15000`

```bash
# Ajouter nouvelles données
cp nouvelles_copies/*.png data/fra_manuscrit-ground-truth/
cp nouvelles_copies/*.gt.txt data/fra_manuscrit-ground-truth/

# Réentraîner (reprend où il s'était arrêté)
make training \
  MODEL_NAME=fra_manuscrit \
  START_MODEL=fra_manuscrit \
  TESSDATA=./tessdata_best \
  MAX_ITERATIONS=15000
```

---

## 🛠️ DÉPANNAGE

### ❌ Erreur : "Tesseract model not found"

```bash
# Vérifier que le modèle est au bon endroit
tesseract --list-langs | grep fra_manuscrit

# Si absent, recopier le fichier
sudo cp data/fra_manuscrit.traineddata /usr/local/share/tessdata/
```

---

### ❌ Erreur : "Make: command not found"

```bash
# Sur Windows WSL
sudo apt-get install make

# Sur Mac
xcode-select --install
```

---

### ❌ L'entraînement s'arrête trop tôt

Augmentez les itérations ou ajustez le critère d'arrêt :

```bash
make training \
  MODEL_NAME=fra_manuscrit \
  START_MODEL=fra \
  TESSDATA=./tessdata_best \
  MAX_ITERATIONS=20000 \
  STOP_TRAINING_EARLY=false
```

---

### ❌ Le modèle ne reconnaît toujours pas bien

**Causes possibles :**

1. **Pas assez de données** → Collectez 20-30 copies minimum
2. **Qualité des scans** → Vérifiez la résolution (300 DPI minimum)
3. **Texte trop varié** → Entraînez sur le type exact de vos examens
4. **Ground truth incorrecte** → Vérifiez que les `.gt.txt` sont exacts

---

## 📊 RÉSULTATS ATTENDUS

### Avant le modèle personnalisé :
```
Texte extrait : "N0m : Je4n Dup0nt   C1asse : CM2"
Précision : ~60-70%
```

### Après le modèle personnalisé :
```
Texte extrait : "Nom : Jean Dupont   Classe : CM2"
Précision : ~85-95%
```

---

## 🎯 CHECKLIST FINALE

- [ ] Tesseract installé et fonctionnel
- [ ] Dépôt `tesstrain` cloné
- [ ] Modèle `fra.traineddata` téléchargé
- [ ] 10-20 copies manuscrites scannées (300 DPI, PNG)
- [ ] Fichiers `.gt.txt` créés pour chaque image
- [ ] Entraînement lancé et terminé sans erreur
- [ ] Modèle `fra_manuscrit.traineddata` généré
- [ ] Modèle copié dans le dossier `tessdata`
- [ ] `ocr_service.py` modifié pour utiliser `fra_manuscrit`
- [ ] Application testée avec succès

---

## 📚 RESSOURCES SUPPLÉMENTAIRES

- **Documentation officielle Tesseract** : https://tesseract-ocr.github.io/
- **Dépôt tesstrain** : https://github.com/tesseract-ocr/tesstrain
- **Guide d'amélioration OCR** : https://github.com/tesseract-ocr/tessdoc

---

**🎉 Félicitations ! Vous avez créé votre modèle Tesseract personnalisé !**

Votre système de correction automatique devrait maintenant être beaucoup plus précis sur l'écriture manuscrite de vos élèves.